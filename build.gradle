plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Java 17 사용
    }
}

repositories {
    mavenCentral() // 중앙 저장소 사용
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Password encoder
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 사용
    implementation 'org.springframework.boot:spring-boot-starter-validation' // Validation
    implementation 'org.springframework.boot:spring-boot-starter-web' // Web Starter

    // JWT 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리용

    // json
    implementation 'org.json:json:20231013'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MySQL Connector
    runtimeOnly 'com.mysql:mysql-connector-j'

    // random string
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // querydsl 추가
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // aws s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Spring Boot Test
    testImplementation 'org.mockito:mockito-core' // Mockito for mocking
    testImplementation 'org.mockito:mockito-junit-jupiter' // Mockito with JUnit 5
}

test {
    systemProperty 'spring.profiles.active', 'test'
    def isBuild = project.hasProperty('excludeTests')
    useJUnitPlatform() { // JUnit 플랫폼 사용
        if(isBuild) {
            excludeTags("dummy-test")
        }
    }
}

// Querydsl 빌드 옵션 (옵셔널)
String generated = "${buildDir}/generated/querydsl"

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
