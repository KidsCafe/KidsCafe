# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "dev", "feat/document" ]

# 저장소(어디 저장소?) 읽기 권한 부여
permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest # 우분투 최신버전
    steps:
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # Temurin 배포판 사용.

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources # resources 폴더 생성
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application.yml # application.yml 생성
          echo "${{ secrets.YML }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
        shell: bash

      # 환경별 yml 파일 생성(2) - prod
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        shell: bash

      # 환경별 yml 파일 생성(3) - aws
      - name: make application-dev.yml
        run: |
          cd ./src/main/resources
          touch ./application-aws.yml
          echo "${{ secrets.YML_AWS }}" > ./application-aws.yml
        shell: bash

      # 환경별 yml 파일 생성(4) - oauth2
      - name: make application-oauth2.yml
        run: |
          cd ./src/main/resources
          touch ./application-oauth2.yml
          echo "${{ secrets.YML_OAUTH2 }}" > ./application-oauth2.yml
        shell: bash

      # gradle 빌드 권한 부여
      - name: Change gradlew permissions
        run: chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 이미지를 만드는 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # docker 이미지 빌드 및 푸시
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REPONAME }}/${{ secrets.DOCKER_IMAGE }}

      ## docker-compose.yml 환경변수에 저장
      - name: saving docker-compose.yml
        run: |
          YML_DOCKER_COMPOSE=$(cat ./docker-compose.yml | base64 -w 0)
          echo "YML_DOCKER_COMPOSE=$YML_DOCKER_COMPOSE" >> $GITHUB_ENV
          echo "$YML_DOCKER_COMPOSE" | base64 --decode

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: | # 기존 컨테이너 종료 후 최신 이미지를 가져와서 컨테이너 재시작
            echo "DOCKER_REPONAME=${{ secrets.DOCKER_REPONAME }}" >> .env
            echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> .env
            
            echo "${{ env.YML_DOCKER_COMPOSE }}"
            touch ./docker-compose.yml
            echo "${{ env.YML_DOCKER_COMPOSE }}" | base64 --decode > ./docker-compose.yml
            cat ./docker-compose.yml
            sudo docker compose -f ./docker-compose.yml down 
            sudo docker compose -f ./docker-compose.yml pull
            sudo docker compose -f ./docker-compose.yml up -d